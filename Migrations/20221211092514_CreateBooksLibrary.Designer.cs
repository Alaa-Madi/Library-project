// <auto-generated />
using System;
using BookLIbrary12;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLIbrary12.Migrations
{
    [DbContext(typeof(Bookcontext))]
    [Migration("20221211092514_CreateBooksLibrary")]
    partial class CreateBooksLibrary
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookLIbrary12.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LibraryAddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("history")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.HasKey("AccountID");

                    b.HasIndex("LibraryAddressID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BookLIbrary12.Auther", b =>
                {
                    b.Property<int>("autherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("autherID");

                    b.ToTable("Authers");
                });

            modelBuilder.Entity("BookLIbrary12.Book", b =>
                {
                    b.Property<int>("ISBNID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibraianAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numberOfPage")
                        .HasColumnType("int");

                    b.Property<DateTime>("publicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ISBNID");

                    b.HasIndex("LibraianAddressID");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Book");
                });

            modelBuilder.Entity("BookLIbrary12.BookAuther", b =>
                {
                    b.Property<int>("ISBNID")
                        .HasColumnType("int");

                    b.Property<int>("autherID")
                        .HasColumnType("int");

                    b.Property<int?>("BookISBNID")
                        .HasColumnType("int");

                    b.HasKey("ISBNID", "autherID");

                    b.HasIndex("BookISBNID");

                    b.HasIndex("autherID");

                    b.ToTable("BookAuthers");
                });

            modelBuilder.Entity("BookLIbrary12.Catalog", b =>
                {
                    b.Property<int>("CatalogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LibraryAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatalogID");

                    b.HasIndex("LibraryAddressID");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("BookLIbrary12.Libraian", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Libraians");
                });

            modelBuilder.Entity("BookLIbrary12.Library", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("BookLIbrary12.Patron", b =>
                {
                    b.Property<int>("PatronID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatronID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Patrons");
                });

            modelBuilder.Entity("BookLIbrary12.BookItem", b =>
                {
                    b.HasBaseType("BookLIbrary12.Book");

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<int?>("CatalogID")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryAddressID")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRefrenceOnly")
                        .HasColumnType("bit");

                    b.Property<int>("tag")
                        .HasColumnType("int");

                    b.HasIndex("AccountID");

                    b.HasIndex("CatalogID");

                    b.HasIndex("LibraryAddressID");

                    b.HasDiscriminator().HasValue("BookItem");
                });

            modelBuilder.Entity("BookLIbrary12.Account", b =>
                {
                    b.HasOne("BookLIbrary12.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryAddressID");
                });

            modelBuilder.Entity("BookLIbrary12.Book", b =>
                {
                    b.HasOne("BookLIbrary12.Libraian", "Libraian")
                        .WithMany("Books")
                        .HasForeignKey("LibraianAddressID");
                });

            modelBuilder.Entity("BookLIbrary12.BookAuther", b =>
                {
                    b.HasOne("BookLIbrary12.Book", "Book")
                        .WithMany("BookAuthers")
                        .HasForeignKey("BookISBNID");

                    b.HasOne("BookLIbrary12.Auther", "Auther")
                        .WithMany("BookAuthers")
                        .HasForeignKey("autherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLIbrary12.Catalog", b =>
                {
                    b.HasOne("BookLIbrary12.Library", "Library")
                        .WithMany("Catalogs")
                        .HasForeignKey("LibraryAddressID");
                });

            modelBuilder.Entity("BookLIbrary12.Patron", b =>
                {
                    b.HasOne("BookLIbrary12.Account", "Account")
                        .WithOne("Patron")
                        .HasForeignKey("BookLIbrary12.Patron", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLIbrary12.BookItem", b =>
                {
                    b.HasOne("BookLIbrary12.Account", "Account")
                        .WithMany("BookItems")
                        .HasForeignKey("AccountID");

                    b.HasOne("BookLIbrary12.Catalog", "Catalog")
                        .WithMany("bookItems")
                        .HasForeignKey("CatalogID");

                    b.HasOne("BookLIbrary12.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryAddressID");
                });
#pragma warning restore 612, 618
        }
    }
}
